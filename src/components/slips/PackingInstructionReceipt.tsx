
import React from 'react';
import { format } from 'date-fns';
import { CourierSlip } from '@/types/models';
import JsBarcode from 'jsbarcode';

interface PackingInstructionReceiptProps {
  slip: CourierSlip;
}

export const PackingInstructionReceipt: React.FC<PackingInstructionReceiptProps> = ({ slip }) => {
  // Create a ref for the barcode SVG
  const barcodeRef = React.useRef<SVGSVGElement>(null);
  
  // Generate the barcode when the component mounts
  React.useEffect(() => {
    if (barcodeRef.current) {
      JsBarcode(barcodeRef.current, slip.trackingId, {
        format: "CODE128",
        displayValue: false,
        lineColor: "#000",
        width: 1.5,
        height: 40,
        margin: 5,
      });
    }
  }, [slip.trackingId]);

  // Extract city and state from the customer address
  const extractCityState = (address: string): string => {
    // Try to extract city and state
    const addressParts = address.split(', ');
    if (addressParts.length >= 2) {
      // Find city and state parts - they're typically toward the end
      for (let i = addressParts.length - 3; i < addressParts.length - 1; i++) {
        if (i >= 0 && addressParts[i] && !addressParts[i].match(/^\d/)) {
          return addressParts[i];
        }
      }
    }
    // Fallback: just return location if we can't extract
    return 'Location details';
  };
  
  const cityStateInfo = extractCityState(slip.customerAddress);
    
  // Format the date and time
  const formattedDate = format(new Date(slip.generatedAt), 'dd/MM/yyyy HH:mm');
  
  // Calculate total weight if box weights are available
  const totalWeight = slip.boxWeights && slip.boxWeights.length > 0
    ? slip.boxWeights.reduce((sum, weight) => sum + weight, 0).toFixed(2) + ' kg'
    : slip.weight ? `${slip.weight} kg` : 'Not weighed';

  return (
    <div id={`slip-${slip.id}`} className="print-only thermal-receipt packing-instruction" style={{ width: '80mm', fontFamily: 'monospace' }}>
      {/* Company Header */}
      <div className="text-center pb-1 border-b border-black">
        <div className="font-bold">YOUR COMPANY NAME</div>
        <div className="text-xs">123 Company Address, City</div>
        <div className="text-xs">Phone: 1234567890</div>
      </div>
      
      {/* Header */}
      <div className="text-center py-1 border-b border-black">
        <div className="font-bold">PACKING SLIP</div>
      </div>
      
      {/* Tracking and Date */}
      <div className="text-center py-1">
        <div className="font-bold text-sm">TRACKING #: {slip.trackingId}</div>
        <div className="text-xs">{formattedDate}</div>
      </div>
      
      {/* Barcode */}
      <div className="py-1 flex justify-center">
        <svg ref={barcodeRef} className="barcode w-full h-10"></svg>
      </div>
      
      {/* Customer Details */}
      <div className="border-y border-black py-1">
        <div className="font-bold text-sm">Customer:</div>
        <div>{slip.customerName}</div>
        <div className="text-xs">{cityStateInfo}</div>
        <div className="text-xs">Ph: {slip.customerMobile}</div>
      </div>
      
      {/* Package Details */}
      <div className="py-1">
        <div className="font-bold text-sm">Package Details:</div>
        <div className="flex justify-between text-xs">
          <span>Courier:</span>
          <span>{slip.courierName}</span>
        </div>
        <div className="flex justify-between text-xs">
          <span>Boxes/Pieces:</span>
          <span>{slip.numberOfBoxes || 1}</span>
        </div>
        <div className="flex justify-between text-xs">
          <span>Total Weight:</span>
          <span>{totalWeight}</span>
        </div>
        <div className="flex justify-between text-xs">
          <span>Shipping:</span>
          <span>{slip.method === 'air' ? 'AIR' : 'SURFACE'}</span>
        </div>
        <div className="flex justify-between text-xs">
          <span>Payment:</span>
          <span>{slip.isToPayShipping ? 'TO PAY' : 'PAID'}</span>
        </div>
      </div>
      
      {/* Box Weights (if available) */}
      {slip.boxWeights && slip.boxWeights.length > 0 && (
        <div className="py-1 border-t border-black">
          <div className="font-bold text-sm">Box Weights:</div>
          <div className="flex flex-wrap">
            {slip.boxWeights.map((weight, index) => (
              <div key={index} className="text-xs mr-2">
                Box {index + 1}: {weight.toFixed(2)} kg
              </div>
            ))}
          </div>
        </div>
      )}
      
      {/* Generated By */}
      <div className="pt-1 border-t border-black text-xs">
        <div>Generated by: {slip.generatedBy}</div>
        {slip.weighedBy && <div>Weighed by: {slip.weighedBy}</div>}
      </div>
      
      {/* Footer */}
      <div className="mt-3 pt-1 border-t border-black text-center text-xs">
        <div>Thank you for your business!</div>
        <div className="mt-1">--- www.yourcompany.com ---</div>
      </div>
    </div>
  );
};

export default PackingInstructionReceipt;
